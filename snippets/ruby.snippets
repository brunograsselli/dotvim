# attr_reader
snippet r
	attr_reader :${1:attr_names}
# attr_writer
snippet w
	attr_writer :${1:attr_names}
# attr_accessor
snippet rw
	attr_accessor :${1:attr_names}
snippet def
	def ${1:method_name}
		${2}
	end
snippet defs
	def self.${1:class_method_name}
		${2}
	end
snippet if
	if ${1:condition}
		${2}
	end
snippet cla class .. end
	class ${1:`substitute(substitute(Filename(), '_\(\w\)', '\U\1', 'g'), '^\(.\)', '\U\1', '')`}
		${2}
	end
snippet mod module .. end
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet desc
	require "spec_helper"

	RSpec.describe ${1:`substitute(substitute(substitute(Filename(),'\(.*\)_spec','\1',''), '_\(\w\)', '\U\1', 'g'), '^\(.\)', '\U\1', '')`} do
	  ${2}
	end
snippet des
	describe "${1}" do
	  ${2}
	end
snippet cont
	context "${1}" do
	  ${2}
	end
snippet it
	it "${1}" do
	  ${2}
	end
snippet bef
	before do
	  ${1}
	end
snippet aft
	after do
	  ${1}
	end
